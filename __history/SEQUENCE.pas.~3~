unit SEQUENCE;
{
* FILENAME: Sequence.pas
* Date Created: 1/5/2013
* Created By: Jamie Tomlinson (JRT)
*
* Purpose:
*
* Uses:
*   Main.pas
*   Matrix.pas
*
* Procedures/Functions:
*   procedure CreateTrack;
*   procedure CaptureFrame;
*   procedure BackupFrame;
*   procedure ForwardFrame;
*   procedure PlaySequence;
*   procedure DeleteFrame;
*   procedure InsertFrame;
*
* Variables: None
*
* Changes:
}
interface

uses  SysUtils, Graphics;

  procedure CreateTrack;
  procedure CaptureFrame;
  procedure BackupFrame;
  procedure ForwardFrame;
  procedure PlaySequence;
  procedure DeleteFrame;
  procedure InsertFrame;

implementation

uses MAIN, MATRIX;

procedure CreateTrack;
begin
  // REWORK
  // set the initial length of our sequence to 100 frames
  CurrentBuffer := AddFrames;
  SetLength(SASequence, Rows, Cols, CurrentBuffer);
  Frame := 0;
end;


{
  CAPTURE FRAME
  This procedure allows us to capture a frame of animation to our sequence array.
  It uses the frame variable to keep track of time in the animation.
  Simply put, it transfers all the colors currently showing to the sequency array
  allowing for playback at a later date, or for saving to a file.

  What would be required to output this to an XML file that could be read by
  existing sequencing software?

  Colors are saved as integers representing the current color of the existing shape.
  These integer colors are representative of using 6 digit HEX code to represent colors.
  $FF = 255 = Red
  $FF00 = 65280 = Green
  $FF0000 = 16711680 = Blue
  $FFFFFF = 16777215 = White
  $000000 = 0 = Black

  According to TColor, there can be a fourth HEX pair to represent a pallete.
}
procedure CaptureFrame;
var
  X: Integer;
  Y: Integer;
begin
  // REWORK
  // copy the color from each "light" to the sequence array, then advance the frame.
  for Y := 0 to Rows -1 do
    for X := 0 to Cols - 1 do
      begin
        SASequence[Y, X, Frame] := LightMatrix[Y, X].Brush.Color;
        if Frame = LastFrame then
          begin
          // Step forward in time in our animation
          Frame := Frame + 1;
          MainForm.Label2.Caption := IntToStr(Frame);
          // TopFrame is the last frame in our sequence.  By using this, we can step
          // through the animation using frame and still keep the end location of the animation.
          LastFrame := Frame;
        end;
      // If the value of frame is at the end of our current buffer then we need to increase the
      // size of the buffer
      if Frame = CurrentBuffer then
        begin
          // so we add an amount (AddFrames - Constant)
          CurrentBuffer := CurrentBuffer + AddFrames;
          // and reset the length of our array.
          SetLength(SASequence, Rows, Cols, CurrentBuffer);
        end;
      end;
end;



{
  BACK UP FRAME
  This procedure simply steps backwards in time by one animation frame and redraws the matrix
  This procedure actually changes the value of the frame variable, so it is pointing to a previous
  instant in time in the animation.  Any changes made and captured result in the sequence array being
  altered.  An added benefit is that the post point in time sequence is NOT changed, so we could actually
  step forward in time, but we would need a variable to represent the previous (before stepping back) last
  frame so we wouldn't overshoot the end of the sequence array.
}
procedure BackupFrame;
var
  X: Integer;
  Y: Integer;
begin
  // REWORK
{
  //  The way the routine is set right now, it "erases" the current frame of animation
  // before stepping back in time.  This could be changed to preserve the current frame
  // so that backwards and forwards editing could be accomplished.
  for x := 0 to ((Rows * Cols) - 1) do
    LightSequence[x, Frame] := clBlack;
  // Step back in time one frame of animation
}
  // If we aren't at the beginning of our sequence then we can step backwards
  if Frame > 0 then Frame := Frame - 1;
  // and reload that "animation" into the light matrix.  Repaint to be able to see the changes.
  for Y := 0 to Rows - 1 do
    begin
    LightMatrix[Y, X].Brush.Color := SASequence[Y, X, Frame];
    MainForm.Label2.Caption := IntToStr(Frame);
    LIghtMatrix[Y, X].Repaint;
    end;

end;

{
  FORWARD FRAME
  Allows us to step forward through our animation
}

procedure ForwardFrame;
var
  X: Integer;
  Y: Integer;
begin
  // REWORK
  // If we aren't at the end of our sequence, we can step forwards
  if Frame < LastFrame then Frame := Frame + 1;
  // and reload that "animation" into the light matrix.  Repaint to be able to see the changes.
  for Y := 0 to Rows - 1 do
    for X := 0 to Cols - 1 do
      begin
        LightMatrix[Y, X].Brush.Color := SASequence[Y, X, Frame];
        MainForm.Label2.Caption := IntToStr(Frame);
        LightMatrix[Y, X].Repaint;
      end;
end;


{
  PLAY SEQUENCE
  Allows a person to replay a sequence that he has created.  Simply loads
  the color from the sequence array and places it into each shape.  It uses the FRAME
  variable to keep track of where we are in the array for "time".
}
procedure PlaySequence;
var
  x, y, Z: integer;
begin
  // REWORK
  //  Again, Frame is the timeframe of the sequence array.
  // Since Frame=Frame+1 when you capture your last "frame" of animation,
  // That means the current frame variable is pointing to empty cells in the array
  // so we need to back up the pointer to make sure we don't run into uncharted territory.
  for Z := 0 to LastFrame - 1 do
    begin
    // Simply stepping through our Light Array and copying over from sequence
    // This uses y as a counter for the lights (channels) and x for the value of time in the sequence
    for y := 0 to Rows - 1 do
      for x := 0 to Cols - 1 do
        begin
          LightMatrix[Y, X].Brush.Color := SASequence[y, x, z];
          // had to repaint the "light" shapes so the colors would show after they had been changed.
          LightMatrix[Y, X].Repaint;
      end;
    end;
end;

procedure DeleteFrame;
begin
  //
end;

procedure InsertFrame;
begin
  //
end;

end.
