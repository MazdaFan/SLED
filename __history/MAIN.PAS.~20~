unit MAIN;
{
* FILENAME: Main.pas
* Date Created: 12/29/2012
* Created By: Jamie Tomlinson (JRT)
*
* Purpose:
*
* Uses:
*     About.pas
*     Setup.pas
*     Matrix.pas
*     Sequence.pas
*     File_IO.pas
*     Export_XML.pas
*
* Procedures/Functions:
*    procedure FileNew1Execute(Sender: TObject);
*    procedure FileOpen1Execute(Sender: TObject);
*    procedure FileSave1Execute(Sender: TObject);
*    procedure FileExit1Execute(Sender: TObject);
*    procedure HelpAbout1Execute(Sender: TObject);
*    procedure ColorBox1Change(Sender: TObject);
*    procedure FormCreate(Sender: TObject);
*    procedure FormClose(Sender: TObject; var Action: TCloseAction);
*    procedure Pla1Click(Sender: TObject);
*    procedure DisplaySequence1Click(Sender: TObject);
*    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
*    procedure ColorGrid1Click(Sender: TObject);
*
* Variables:
*   CurrentColor: TColor;                     // The current color that has been selected
*   Cols, Rows: Integer;                      // How we arrange our "lights"/shapes on screen
*   LightArray: array of TShape;              // An list of our "lights"/shapes on screen
*   LightSequence: array of array of TColor;  // Our actual sequence.  Y is the channel number, X is the frame of animation
*   Frame: integer;                           // Animation pointer - where we currently are
*   LastFrame: integer;                       // The position of our last frame of animation
*   CurrentBuffer: integer;                   // The current sequence buffer length
*   TimeHack: integer;                        // Number of 1/100th of a seconds per frame of animation
*
* Constants:
*     AddFrames
*
* Changes:
*    1/5/13 - Broke apart the program into different modules to aid in readability
*             and debugging
*    1/7/13 - Added a TMemo as an invisible component so that I would have a
*             TStringsList to input XML data to.
}
interface

uses Windows, Classes, Graphics, Forms, Controls, Menus,
  Dialogs, StdCtrls, Buttons, ExtCtrls, ComCtrls, ImgList, StdActns,
  ActnList, ToolWin, Contnrs, SysUtils, MPlayer;

type
  ShapeArray = array of array of TShape;
  TMainForm = class(TForm)
    OpenDialog: TOpenDialog;
    SaveDialog: TSaveDialog;
    ToolBar1: TToolBar;
    ToolButton0: TToolButton;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    ActionList1: TActionList;
    FileNew1: TAction;
    FileOpen1: TAction;
    FileSave1: TAction;
    FileSaveAs1: TAction;
    FileExit1: TAction;
    EditCut1: TEditCut;
    EditCopy1: TEditCopy;
    EditPaste1: TEditPaste;
    HelpAbout1: TAction;
    StatusBar: TStatusBar;
    ImageList1: TImageList;
    MainMenu1: TMainMenu;
    File1: TMenuItem;
    FileNewItem: TMenuItem;
    FileSaveItem: TMenuItem;
    FileSaveAsItem1: TMenuItem;
    N1: TMenuItem;
    FileExitItem: TMenuItem;
    Edit1: TMenuItem;
    CutItem: TMenuItem;
    CopyItem: TMenuItem;
    PasteItem: TMenuItem;
    Help1: TMenuItem;
    HelpAboutItem: TMenuItem;
    Play1: TMenuItem;
    ExportSequence1: TMenuItem;
    Label1: TLabel;
    Label2: TLabel;
    MyMemo: TMemo;
    AsLORS31: TMenuItem;
    AsVixen1: TMenuItem;
    AsLSP1: TMenuItem;
    New1: TMenuItem;
    OpenSequence1: TMenuItem;
    OpenTemplate1: TMenuItem;
    SaveSequence1: TMenuItem;
    SaveTemplate1: TMenuItem;
    EffStrings: TMemo;
    MediaPlayer1: TMediaPlayer;
    ProgressBar1: TProgressBar;
    Timer1: TTimer;
    Audio1: TMenuItem;
    StaticText1: TStaticText;
    Label3: TLabel;
    ToolButton3: TToolButton;
    ToolButton4: TToolButton;
    ToolButton5: TToolButton;
    procedure FileExit1Execute(Sender: TObject);
    procedure HelpAbout1Execute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Play1Click(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure AsLORS31Click(Sender: TObject);
    procedure AsVixen1Click(Sender: TObject);
    procedure AsLSP1Click(Sender: TObject);
    procedure OpenSequence1Click(Sender: TObject);
    procedure OpenTemplate1Click(Sender: TObject);
    procedure New1Click(Sender: TObject);
    procedure SaveSequence1Click(Sender: TObject);
    procedure FormMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure FormMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure FormMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure Button1Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure Audio1Click(Sender: TObject);



  private
    { Private declarations }



  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;
  CurrentColor: TColor;                     // The current color that has been selected
  Cols, Rows: Integer;                      // How we arrange our "lights"/shapes on screen
  LightMatrix: ShapeArray;              // An list of our "lights"/shapes on screen
  SwapMatrix: array of array of TColor;
  SASequence: array of array of array of TColor;  // Our actual sequence.  Y is the channel number, X is the frame of animation
  ChannelArray: array of array of Integer;
  Frame: integer;                           // Animation pointer - where we currently are
  LastFrame: integer;                       // The position of our last frame of animation
  CurrentBuffer: integer;                   // The current sequence buffer length
  TimeHack: integer;                        // Number of 1/100th of a seconds per frame of animation
  IsLRL: Boolean;
  IsDUD: Boolean;

const
  AddFrames = 100;                          // How many "frames" we add to the current buffer: AddFrames*TimeHack div 100 = seconds

implementation

uses about, setup, MATRIX, SEQUENCE, File_IO, Buffer, EXPORT_LOR, EXPORT_VIXEN;

{$R *.dfm}


procedure TMainForm.Play1Click(Sender: TObject);
begin
  PlaySequence;
end;

{
*
* SAVE A SEQUENCE FILE
*
}
procedure TMainForm.SaveSequence1Click(Sender: TObject);
begin
  SaveDialog.DefaultExt := '.sas';
  SaveDialog.Filter := 'SLED Files (*.sas)|*.sas|All Files (*.*)|*.*';
  SaveDialog.Title := 'Save SLED Sequence';
  // if OK or Return was selected from the Save Dialog, then open the filename.
  if SaveDialog.Execute then
  SaveSequence(SaveDialog.FileName);
end;


procedure TMainForm.Timer1Timer(Sender: TObject);
begin
  if ProgressBar1.Max <> 0 then
    ProgressBar1.position := MediaPlayer1.Position;
end;

procedure TMainForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  // As the form closes, we need to free up the memory from our array of lights
  FreeLightMatrix;
  FreeBufferMatrix;
end;

procedure TMainForm.FormCreate(Sender: TObject);
begin
  KeyPreview := True;
  IsLRL := False;
  IsDUD := False;
  TimeHack := 50;    // default to catch files that do not have a timehack assigned.
  // Set up our dynamic array with a length of 0
  SetLength(LightMatrix,0, 0);
end;

procedure TMainForm.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  // Catch keystrokes and manipulate the matrix
  if ssShift in Shift then     // Catch Shifted Keystrokes
    begin
      //
    end
  else
  if ssAlt in Shift then       // Catch Alt Keypresses
    begin
       //
    end
  else if ssCtrl in Shift then   // Catch Ctrl Keypresses
       begin
        case Key of
          VK_NUMPAD1: begin ShiftDown; ShiftLeft; end;
          VK_NUMPAD2: begin ShiftDown; end;
          VK_NUMPAD3: begin ShiftDown; ShiftRight; end;
          VK_NUMPAD4: begin ShiftLeft; end;
          VK_NUMPAD5: begin SwapBuffer; end;
          VK_NUMPAD6: begin ShiftRight; end;
          VK_NUMPAD7: begin ShiftUp; ShiftLeft; end;
          VK_NUMPAD8: begin ShiftUp; end;
          VK_NUMPAD9: begin ShiftUp; ShiftRight; end;
        end;
       end
  else                        // No Modifier
    begin
      case Key of
        VK_NUMPAD0: PlaySequence;
        VK_NUMPAD1: begin CaptureFrame; ShiftDown; ShiftLeft; end;
        VK_NUMPAD2: begin CaptureFrame; ShiftDown; end;
        VK_NUMPAD3: begin CaptureFrame; ShiftDown; ShiftRight; end;
        VK_NUMPAD4: begin CaptureFrame; ShiftLeft; end;
        VK_NUMPAD5: begin CaptureFrame; SwapBuffer; end;
        VK_NUMPAD6: begin CaptureFrame; ShiftRight; end;
        VK_NUMPAD7: begin CaptureFrame; ShiftUp; ShiftLeft; end;
        VK_NUMPAD8: begin CaptureFrame; ShiftUp; end;
        VK_NUMPAD9: begin CaptureFrame; ShiftUp; ShiftRight; end;
        VK_RETURN: CaptureFrame;
        VK_SUBTRACT:; // begin CaptureFrame; SplitHorizontally; end;
        VK_ADD:; // begin CaptureFrame; SplitHorizontally; SplitVertically; end;
        VK_LEFT: BackupFrame;
        VK_RIGHT: ForwardFrame;
        VK_DIVIDE:;  // begin CaptureFrame; SplitVertically; end;
        VK_INSERT: InsertFrame;
        VK_DELETE: DeleteFrame;
        VK_F11:; //CloseBuffer;
        VK_F12: if BufferForm.Visible then BufferForm.Visible := False else BufferForm.Visible := True;
    end;

  end;
end;

procedure TMainForm.FormMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  MouseDrag := True;
  SetCapture(MainForm.Handle);
end;

procedure TMainForm.FormMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  if Dragging then    // Put capture code here for dragging the mouse
    begin

    end;
end;

procedure TMainForm.FormMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  MouseDrag := False;
  ReleaseCapture;
end;

procedure TMainForm.AsLORS31Click(Sender: TObject);
begin
  //
  SaveDialog.Title := 'Export Sequence';
  SaveDialog.Filter := 'LOR Sequence (.las)|*.las|Vixen Sequence (.vix)|*.vix';
  if SaveDialog.Execute  then
//      Export_LOR.CreateXMLDoc(SaveDialog.FileName );
end;

procedure TMainForm.AsLSP1Click(Sender: TObject);
begin
  // Empty Exports as LightShow Pro
end;

procedure TMainForm.AsVixen1Click(Sender: TObject);
begin
  //  Empty  Exports as Vixen
end;

procedure TMainForm.Audio1Click(Sender: TObject);
begin
  OpenDialog.Title := 'Open MP3 File';
  if OpenDialog.Execute  then
    begin
    MediaPlayer1.Close;
    MediaPlayer1.FileName := OpenDialog.FileName;
    MediaPlayer1.Open;
    ProgressBar1.Max := MediaPlayer1.Length;
    end;

end;

procedure TMainForm.Button1Click(Sender: TObject);
begin
  Label2.Caption := IntToStr(SizeOf(LightMatrix[0,0]));
end;

procedure TMainForm.FileExit1Execute(Sender: TObject);
begin
  //Close our application
  Close;
end;

procedure TMainForm.HelpAbout1Execute(Sender: TObject);
begin
  About.AboutBox.ShowModal;
end;

{
*
*  CREATE A NEW SEQUENCE
*
}
procedure TMainForm.New1Click(Sender: TObject);
begin
  //Get rid of any shapes on the form, then set then initialize the arrays.
  FreeLightMatrix;
  SetLength(LightMatrix,0, 0);
  SetLength(SASequence,0,0,0);
  // Make our sub form visible
  Setup.SetupForm.Visible := True;
end;

{
*
*  OPEN SEQUENCE FILE
*
}
procedure TMainForm.OpenSequence1Click(Sender: TObject);
begin
  OpenDialog.DefaultExt := '.sas';
  OpenDialog.Title := 'Open SLED Sequence';
  OpenDialog.Filter := 'SLED Files (*.sas)|*.sas|All Files (*.*)|*.*';
  OpenDialog.InitialDir := './Sequences/';
  // If OK or Return was selected from the Open Dialog, the load the filename.
  if OpenDialog.Execute then
  LoadSequence(OpenDialog.FileName);
end;

{
*
*  Open a Template File
*
}

procedure TMainForm.OpenTemplate1Click(Sender: TObject);
begin
//
end;

procedure CodeVault;
begin
{ // Save Dialog

}

{  New Sequence

}

{ // Open Sequence

}

end;

end.
